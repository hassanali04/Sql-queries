INSERT INTO "users" ("id", "name", "email","country") VALUES (4, 'hassan', 'hassanali@gmail.com','pakistan');
insert  into "users" ("id","name","email") values (5,'zaid','zaidhassan@gamil.com');
insert  into "users" ("id","name","email") values (6,'basit','abdulbasit@gamil.com');
insert  into "users" ("id","name","email") values (7,'basit','abdulbasit@gamil.com');
update users set name ='yasir' where id =7;
delete from users where id = 6;
ALTER TABLE "users" ADD COLUMN "country" VARCHAR(255);
alter table "users" drop column "column_country"; 
select * from users;
delete from "users" where id = 4;
insert  into "student"  ("id","name","age") values (5,'zaid',8);
insert  into "student"  ("id","name","age") values (6,'basit',12);
select * from "student" where id = 6 and isdeleted = false;
--delete specific id
delete from "student" where id = 5;
order by "name" desc 
select * from student ;
create table customers (id int4 primary KEY ,Name varchar(50),email varchar(255),DOB date );
insert into customers ("id","name","email") values (1,'raza','raza2@gmail.com');
insert into customers ("id","name","email") values (3,'basit','basit2@gmail.com');
insert into customers ("id","name","email") values (5,'razi','razi2@gmail.com');
insert into customers ("id","name","email") values (2,'ali','ali2@gmail.com');
insert into customers ("id","name","email") values (6,'saqib','saqib2@gmail.com');
insert into customers ("id","name","email") values (4,'zakir','zakir2@gmail.com');
insert into customers values (9,'zohaib','zohaid@gmail.com');

--alter table add column
alter table customers add column salary int ;

--order by asc and desc
select * from customers
order by name asc 
UPDATE customers
SET salary = 400 
WHERE id = 1; 

UPDATE customers
SET salary = 500
WHERE id = 3;

UPDATE customers
SET salary = 5000
WHERE id = 5;

UPDATE customers
SET salary = 900
WHERE id = 2;

UPDATE customers
SET salary = 850
WHERE id = 6;

--update tablename set columnname = values where id = 12;
UPDATE customers
SET salary = 600
WHERE id = 4;

--or function between two function
UPDATE customers
SET salary = 1200
WHERE salary < 1000 or salary > 2000;

--and function
SELECT *
FROM customers
WHERE salary < 1400 AND name = 'basit';

--show all table
SELECT table_name
FROM information_schema.tables
WHERE table_schema = 'public';
drop table student;

--show the latest value
select * from customers
order by id  desc  
limit 1;

--create table tablename
create table class_student(id int ,student varchar,course varchar,marks int);

--insert into tablename values
insert into class_student values(1,'s1','c1',4) ;
insert into class_student values(2,'s1','c2',8) ;
insert into class_student values(3,'s1','c3',7) ;
insert into class_student values(4,'s2','c1',5) ;
insert into class_student values(5,'s2','c2',6) ;
insert into class_student values(6,'s2','c3',9) ;	
select * from class_student;

--total marks of student s1,s2

select student , sum(marks) as "count of student"
from class_student
group by student
order by sum(marks) asc 

--high mark of student

select student ,course,max(marks) as max_marks 
from class_student 
group by student,course
order by max(marks)asc

--SELECT DISTINCT 
select distinct STUDENT
from class_student;

--select COUNT (distinct STUDENT)
select COUNT(distinct STUDENT) from CLASS_STUDENT;


select * from class_student
where id = 1




--CUSTOMER1 TABLE-1 /////////////////////

CREATE TABLE customer1 (
    customerid INT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255),
    address VARCHAR(255)
);


INSERT INTO customer1 (customerid, name, email, address)
VALUES
    (1, 'zahid', 'zahid2@gmail.com', 'house no 12'),
    (2, 'zohaib', 'zohaib3@gmail.com', 'house no 14'),
    (3, 'zeeshan', 'zeshan4@gmail.com', 'house no 11');


--   CONTACT TABLE-2              /////////////////////
CREATE TABLE contact (
    id INT PRIMARY KEY,
    phone varchar(20),
    contactphonename VARCHAR(255),
    customerid INT,
    FOREIGN KEY (customerid) REFERENCES customer1(customerid)
);

insert into contact (id,phone,contactphonename,customerid) values (5,'652365823','salem',1);
insert into contact (id,phone,contactphonename,customerid) values (6,'222222222','sohaib',2);
insert into contact (id,phone,contactphonename,customerid) values (7,'444444444','zargham',3);
select * from contact ;


--INVOICEMASTER TABLE-3   ///////////////////////////////////


--create table invoicemaster(id int,Date date ,    customerid INT,
--    FOREIGN KEY (customerid) REFERENCES customer1(customerid));

CREATE TABLE invoicemaster (
    id inT primary key not null,
    Date DATE, 
    customerid INT,
    FOREIGN KEY (customerid) REFERENCES customer1(customerid)
);
     insert into invoicemaster values (7, '2023-08-23', 1);
     insert into invoicemaster values(8, '2023-08-24', 2); 
     insert into invoicemaster values(9, '2023-08-24', 3); 

SELECT * FROM customer1;
SELECT * FROM contact;
SELECT * FROM invoicemaster;

--INVOICEDETAIL TABLE-4

create table invoicedetail (id4 int primary key,
                           productname varchar(255),
                           rate int ,
                           quantity int,
                           amount varchar(20) ,
                           id int,
                           foreign key (id) references invoicemaster (id));

insert into invoicedetail (id4,productname,rate,quantity,amount ,id) values (10,'car',4,20,'200000',7);
insert into invoicedetail (id4,productname,rate,quantity,amount ,id) values (15,'phone',4,10,'100000',8);
insert into invoicedetail (id4,productname,rate,quantity,amount ,id) values (20,'tablet',4,20,'1000000',9);

select * from invoicedetail;

SELECT customer1.name, customer1.email, contact.phone, contact.contactphonename
FROM customer1
INNER JOIN contact ON customer1.customerid = contact.customerid;

select 
*
from customer1 c inner join contact c2 on c2.customerid = c.customerid 

create table customer2 (id int primary key,name varchar(255));
insert into customer2 (id,name) values (1,'customer1');
insert into customer2 (id,name) values (2,'customer2');
create table contact1 ( id int primary key , name varchar(255),customer2_id int);
insert into contact1 values (1,'con1',1);
insert into contact1 values (2,'con2',1);
insert into contact1 values (3,'con3',null);
select * from customer2;
select * from contact1;
--select customer2.name as cunstomer_name,contact1.customer2_name;
--from 
--customer2 right join contact1 on customer2.id = contact1.customer_id;
SELECT  customer2.name AS customer_name ,count(contact1.name) AS contact_name
FROM customer2
RIGHT JOIN contact1 ON customer2.id = contact1.id;
group by customer2.name;


--view

create view vw_customer2 as select c2.* from customer2 c inner join contact1 c2 on c.id = c2.customer_id ;
select * from vw_customer2;
drop view vw_customer2;
create view vw_customer2 as select name from customer2 ;
sp_helptext vw_customer2



create table dept ( id int primary key not null,name varchar(50));
create table teacher (id int primary key,name varchar(50),dept_id int ,foreign key (id) references dept (id));
delete from dept;
alter table dept rename to department;
select * from teacher;
select * from department;


create table employee2(id int primary key,name varchar(250),supervisor_id int );
insert into employee2 (id,name,supervisor_id) values (1,'fahad',0);
insert into employee2 (id,name,supervisor_id) values (2,'nuhail',1);
insert into employee2 (id,name,supervisor_id) values (3,'zaid',2);
select e.name,s.supervisor_id,e.id as s_s_id
from employee2 e , employee2 s
where e.id = s.id;
select *
from employee2 
where  id  = 1;
--<> check for not null

create table company (rollno int,name varchar(50),marks int);
insert into company values (101,'anii',78);
insert into company values (102,'bhumika',93);  
insert into company values (103,'chetan',85);
insert into company values (104,'dhruv',96);
insert into company values (105,'emanuel',92);
insert into company values (106,'farah',82);
select * from company;
select name,rollno
from company 
where rollno in (select rollno from company where mod(rollno,2)=1 );

--create view vw_foremployee2 as select from employee2 e inner join company c on e.id = c.rollno ;
select * from vw_foremployee2;

create or replace procedure sp_insert_user(name varchar(50),email varchar(50)) language plpgsql as
$$begin
  insert into company values (100,name,9);
end$$

call sp_insert_user('hasan', 'asdasd'); 

select * from company 
-- Create or replace the procedure
CREATE OR REPLACE PROCEDURE sp_update_user(id INT, new_name VARCHAR(50)) LANGUAGE plpgsql AS
$$
BEGIN
  UPDATE company SET name = new_name WHERE id = 2;
END
$$;
-- Call the stored procedure to update a record
CALL sp_update_user(100, 'hassan');

select * from company;
drop procedure sp_update_user;

create or replace procedure sp_update_company(p_rollno  int ,p_name varchar(50)) language plpgsql as $$ begin
	update company set name = p_name  where rollno  = p_rollno ;
	end $$;
call sp_update_company(101,'kaleem'); 
select * from company;

create or replace procedure sp_get_company() language plpgsql as $$ begin 
	alter table company add email_2 varchar(50);
end $$
CALL sp_get_company();
select * from company;
 
create or replace procedure sp_get1_company() language plpgsql as 
$$ begin 
	select * from company;
end $$
call sp_get1_company();
SELECT 
    rollno,
    CONCAT(name, ' ', marks) AS full_name
FROM company;

select name  from company
union 
select name from employee2
order by name asc;







--triggers
create table student (id int ,name varchar(50),gender varchar(50),class int ,fees varchar(50));
INSERT INTO student (id, name, gender, class, fees)
VALUES
  (1, 'John Doe', 'Male', 10, '$500'),
  (2, 'Jane Smith', 'Female', 11, '$550'),
  (3, 'Alice Johnson', 'Female', 9, '$480'),
  (4, 'blice Johnson', 'Female', 10, '$480')
  -- Add more rows as needed
  ;
-- 1.
-- Create or replace the trigger function
CREATE OR REPLACE FUNCTION tr_student_forinsert()
RETURNS TRIGGER AS $$
BEGIN
  -- Use RAISE NOTICE to print a message
  RAISE NOTICE 'Something happened in the table';
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the AFTER INSERT trigger
CREATE TRIGGER tr_student_forinsert
AFTER INSERT ON student
FOR EACH ROW
EXECUTE FUNCTION tr_student_forinsert();
select * from tr_student_forinsert();
--2.
-- Modify the trigger function to log a different message
CREATE OR REPLACE FUNCTION tr_student_forinsert()
RETURNS TRIGGER as$$
BEGIN
  -- Use RAISE NOTICE to log a different message
  RAISE NOTICE 'A new row was inserted into the student table';
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Alter the existing trigger to use the modified trigger function
ALTER TRIGGER tr_student_forinsert
ON student
RENAME TO tr_student_forinsert_old;

-- Create the updated trigger
CREATE TRIGGER tr_student_forinsert
AFTER INSERT ON student
FOR each row 
EXECUTE FUNCTION tr_student_forinsert();

create or replace function total_student() returns integer language plpgsql as $$ declare total integer;  begin 
	select count(fees) into total from student;
return total;
end $$

select total_student();

CREATE TABLE employee3 (
    id serial  PRIMARY KEY,
    dept VARCHAR(255),
    product_id INT,
    qty INT,
    sales int 
);
INSERT into employee3 (dept, product_id, qty, sales)
VALUES
    ('Electronics', 101, 5, 500),
    ('Clothing', 102, 3, 150),
    ('Grocery', 103, 10, 200),
    ('Electronics', 104, 2, 250),
    ('Clothing', 105, 4, 100.00),
    ('Grocery', 106, 8, 400),
    ('Electronics', 107, 6, 750),
    ('Clothing', 108, 1, 25),
    ('Grocery', 109, 7, 350),
    ('Electronics', 110, 3, 300);
select * from employee3;
select *,sum(sales) over(partition by dept) as total_sales,
         avg(sales) over (partition by dept) as avg_sales,
         max(sales) over(partition by dept) as max_sales,
         rank() over (partition by dept order by sales desc) as ranking,
         dense_rank() over (partition by dept order by sales desc ) as deser_rank
         row_number() over () as row_numbvers
         from employee3
select now();
select 

create table item_mast (pro_id int ,pro_name varchar(50), pro_price int,pro_com int);
INSERT INTO item_mast VALUES (101, 'Mother Board', 3200.00, 15);
INSERT INTO item_mast VALUES (102, 'Board', 450.00, 16);
INSERT INTO item_mast VALUES (103, 'ZIP drive', 250.00, 14);
INSERT INTO item_mast VALUES (104, 'Speaker', 550.00, 16);
INSERT INTO item_mast VALUES (105, 'Monitor', 5000.00, 11);
INSERT INTO item_mast VALUES (106, 'DVD drive' ,900.00, 12);
INSERT INTO item_mast VALUES (107, 'CD drive',800.00, 12);
INSERT INTO item_mast VALUES (108, 'Printer', 2600.00, 13);
INSERT INTO item_mast VALUES (109, 'Refill cartridge', 350.00, 13);
INSERT INTO item_mast VALUES (110, 'Mouse', 250.00, 12);
select * from item_mast;
select avg(pro_price),pro_com,
from item_mast
group by pro_com;
select pro_name,pro_price 
from item_mast 
where pro_price =(select min(pro_price)
			from item_mast);
-- Create a table called 'salesman'
CREATE TABLE salesman (
    salesman_id INT PRIMARY KEY,
    name VARCHAR(255),
    city VARCHAR(255),
    commission DECIMAL(5, 2)
);

-- Insert data into the 'salesman' table
INSERT INTO salesman (salesman_id, name, city, commission)
VALUES
    (5001, 'James Hoog', 'New York', 0.15),
    (5002, 'Nail Knite', 'Paris', 0.13),
    (5005, 'Pit Alex', 'London', 0.11),
    (5006, 'Mc Lyon', 'Paris', 0.14),
    (5003, 'Lauson Hen', 'San Jose', 0.12),
    (5007, 'Paul Adam', 'Rome', 0.13);

-- Create a table called 'orders'
CREATE TABLE orders (
    ord_no INT PRIMARY KEY,
    purch_amt DECIMAL(8, 2),
    ord_date DATE,
    customer_id INT,
    salesman_id INT
);

-- Insert data into the 'orders' table
INSERT INTO orders (ord_no, purch_amt, ord_date, customer_id, salesman_id)
VALUES
    (70001, 150.5, '2012-10-05', 3005, 5002),
    (70009, 270.65, '2012-09-10', 3001, 5005),
    (70002, 65.26, '2012-10-05', 3002, 5001),
    (70004, 110.5, '2012-08-17', 3009, 5003),
    (70007, 948.5, '2012-09-10', 3005, 5002),
    (70005, 2400.6, '2012-07-27', 3007, 5001),
    (70008, 5760, '2012-09-10', 3002, 5001),
    (70010, 1983.43, '2012-10-10', 3004, 5006),
    (70003, 2480.4, '2012-10-10', 3009, 5003),
    (70012, 250.45, '2012-06-27', 3008, 5002),
    (70011, 75.29, '2012-08-17', 3003, 5007),
    (70013, 3045.6, '2012-04-25', 3002, 5001);
 write a SQL query to find all the orders issued by the salesman 'Paul Adam'.
 Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
 select * from orders ;
 select * from orders where salesman_id = (select salesman_id  from salesman  where name = 'paul adam');
 
